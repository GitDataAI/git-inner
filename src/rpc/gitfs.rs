// This file is @generated by prost-build.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RpcRepository {
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(string, tag = "2")]
    pub uid: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub owner: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub namespace: ::prost::alloc::string::String,
    #[prost(bool, tag = "5")]
    pub is_private: bool,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RpcSignature {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub email: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub time: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RpcCommit {
    #[prost(string, tag = "1")]
    pub hash: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub author: ::core::option::Option<RpcSignature>,
    #[prost(message, optional, tag = "6")]
    pub committer: ::core::option::Option<RpcSignature>,
    #[prost(string, repeated, tag = "9")]
    pub parents: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "10")]
    pub tree: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub gpgsig: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RpcTag {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub object_hash: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub object_type: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub tag_name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub tagger: ::core::option::Option<RpcSignature>,
    #[prost(string, tag = "6")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RpcTreeItem {
    #[prost(enumeration = "RpcTreeItemMode", tag = "1")]
    pub mode: i32,
    #[prost(string, tag = "2")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RpcTree {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub tree_items: ::prost::alloc::vec::Vec<RpcTreeItem>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RpcRefs {
    #[prost(message, optional, tag = "1")]
    pub repository: ::core::option::Option<RpcRepository>,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub full_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub hash: ::prost::alloc::string::String,
    #[prost(enumeration = "RpcRefsType", tag = "5")]
    pub r#type: i32,
    #[prost(bool, tag = "6")]
    pub is_default: bool,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RpcTreeItemMode {
    Unknown = 0,
    Blob = 1,
    BlobExecutable = 2,
    Tree = 3,
    Commit = 4,
    Link = 5,
}
impl RpcTreeItemMode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "UNKNOWN",
            Self::Blob => "BLOB",
            Self::BlobExecutable => "BLOB_EXECUTABLE",
            Self::Tree => "TREE",
            Self::Commit => "COMMIT",
            Self::Link => "LINK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "BLOB" => Some(Self::Blob),
            "BLOB_EXECUTABLE" => Some(Self::BlobExecutable),
            "TREE" => Some(Self::Tree),
            "COMMIT" => Some(Self::Commit),
            "LINK" => Some(Self::Link),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RpcRefsType {
    NoneRefs = 0,
    Branch = 1,
    Tag = 2,
    Note = 3,
    Remote = 4,
}
impl RpcRefsType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::NoneRefs => "NoneRefs",
            Self::Branch => "BRANCH",
            Self::Tag => "TAG",
            Self::Note => "NOTE",
            Self::Remote => "REMOTE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NoneRefs" => Some(Self::NoneRefs),
            "BRANCH" => Some(Self::Branch),
            "TAG" => Some(Self::Tag),
            "NOTE" => Some(Self::Note),
            "REMOTE" => Some(Self::Remote),
            _ => None,
        }
    }
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CommitHeadRequest {
    #[prost(message, optional, tag = "1")]
    pub repository: ::core::option::Option<RpcRepository>,
    #[prost(string, tag = "2")]
    pub branch: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CommitHeadResponse {
    #[prost(message, optional, tag = "1")]
    pub commit: ::core::option::Option<RpcCommit>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CommitGetRequest {
    #[prost(message, optional, tag = "1")]
    pub repository: ::core::option::Option<RpcRepository>,
    #[prost(string, tag = "2")]
    pub hash: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CommitGetResponse {
    #[prost(message, optional, tag = "1")]
    pub commit: ::core::option::Option<RpcCommit>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CommitLogRequest {
    #[prost(message, optional, tag = "1")]
    pub repository: ::core::option::Option<RpcRepository>,
    #[prost(string, tag = "2")]
    pub r#ref: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub limit: i32,
    #[prost(int32, tag = "4")]
    pub offset: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommitLogResponse {
    #[prost(message, repeated, tag = "1")]
    pub commits: ::prost::alloc::vec::Vec<RpcCommit>,
}
/// Generated client implementations.
pub mod commit_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct CommitServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl CommitServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> CommitServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> CommitServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            CommitServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn head(
            &mut self,
            request: impl tonic::IntoRequest<super::CommitHeadRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CommitHeadResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/gitfs.CommitService/Head");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("gitfs.CommitService", "Head"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get(
            &mut self,
            request: impl tonic::IntoRequest<super::CommitGetRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CommitGetResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/gitfs.CommitService/Get");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("gitfs.CommitService", "Get"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn log(
            &mut self,
            request: impl tonic::IntoRequest<super::CommitLogRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CommitLogResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/gitfs.CommitService/Log");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("gitfs.CommitService", "Log"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod commit_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with CommitServiceServer.
    #[async_trait]
    pub trait CommitService: std::marker::Send + std::marker::Sync + 'static {
        async fn head(
            &self,
            request: tonic::Request<super::CommitHeadRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CommitHeadResponse>,
            tonic::Status,
        >;
        async fn get(
            &self,
            request: tonic::Request<super::CommitGetRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CommitGetResponse>,
            tonic::Status,
        >;
        async fn log(
            &self,
            request: tonic::Request<super::CommitLogRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CommitLogResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct CommitServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> CommitServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for CommitServiceServer<T>
    where
        T: CommitService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/gitfs.CommitService/Head" => {
                    #[allow(non_camel_case_types)]
                    struct HeadSvc<T: CommitService>(pub Arc<T>);
                    impl<
                        T: CommitService,
                    > tonic::server::UnaryService<super::CommitHeadRequest>
                    for HeadSvc<T> {
                        type Response = super::CommitHeadResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CommitHeadRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CommitService>::head(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = HeadSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gitfs.CommitService/Get" => {
                    #[allow(non_camel_case_types)]
                    struct GetSvc<T: CommitService>(pub Arc<T>);
                    impl<
                        T: CommitService,
                    > tonic::server::UnaryService<super::CommitGetRequest>
                    for GetSvc<T> {
                        type Response = super::CommitGetResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CommitGetRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CommitService>::get(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gitfs.CommitService/Log" => {
                    #[allow(non_camel_case_types)]
                    struct LogSvc<T: CommitService>(pub Arc<T>);
                    impl<
                        T: CommitService,
                    > tonic::server::UnaryService<super::CommitLogRequest>
                    for LogSvc<T> {
                        type Response = super::CommitLogResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CommitLogRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CommitService>::log(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LogSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for CommitServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "gitfs.CommitService";
    impl<T> tonic::server::NamedService for CommitServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RpcRefsRequest {
    #[prost(message, optional, tag = "1")]
    pub repository: ::core::option::Option<RpcRepository>,
    #[prost(bool, tag = "2")]
    pub branch: bool,
    #[prost(bool, tag = "3")]
    pub tag: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RpcRefsResponse {
    #[prost(message, repeated, tag = "1")]
    pub refs: ::prost::alloc::vec::Vec<RpcRefs>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RpcRefsExchangeDefaultRequest {
    #[prost(message, optional, tag = "1")]
    pub repository: ::core::option::Option<RpcRepository>,
    #[prost(string, tag = "2")]
    pub default_branch: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RpcRefsExchangeDefaultResponse {
    #[prost(message, optional, tag = "1")]
    pub refs: ::core::option::Option<RpcRefs>,
}
/// Generated client implementations.
pub mod refs_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct RefsServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl RefsServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> RefsServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> RefsServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            RefsServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn refs(
            &mut self,
            request: impl tonic::IntoRequest<super::RpcRefsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RpcRefsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/gitfs.RefsService/Refs");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("gitfs.RefsService", "Refs"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn refs_exchange_default(
            &mut self,
            request: impl tonic::IntoRequest<super::RpcRefsExchangeDefaultRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RpcRefsExchangeDefaultResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gitfs.RefsService/RefsExchangeDefault",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gitfs.RefsService", "RefsExchangeDefault"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod refs_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with RefsServiceServer.
    #[async_trait]
    pub trait RefsService: std::marker::Send + std::marker::Sync + 'static {
        async fn refs(
            &self,
            request: tonic::Request<super::RpcRefsRequest>,
        ) -> std::result::Result<tonic::Response<super::RpcRefsResponse>, tonic::Status>;
        async fn refs_exchange_default(
            &self,
            request: tonic::Request<super::RpcRefsExchangeDefaultRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RpcRefsExchangeDefaultResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct RefsServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> RefsServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for RefsServiceServer<T>
    where
        T: RefsService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/gitfs.RefsService/Refs" => {
                    #[allow(non_camel_case_types)]
                    struct RefsSvc<T: RefsService>(pub Arc<T>);
                    impl<
                        T: RefsService,
                    > tonic::server::UnaryService<super::RpcRefsRequest> for RefsSvc<T> {
                        type Response = super::RpcRefsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RpcRefsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RefsService>::refs(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RefsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gitfs.RefsService/RefsExchangeDefault" => {
                    #[allow(non_camel_case_types)]
                    struct RefsExchangeDefaultSvc<T: RefsService>(pub Arc<T>);
                    impl<
                        T: RefsService,
                    > tonic::server::UnaryService<super::RpcRefsExchangeDefaultRequest>
                    for RefsExchangeDefaultSvc<T> {
                        type Response = super::RpcRefsExchangeDefaultResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RpcRefsExchangeDefaultRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RefsService>::refs_exchange_default(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RefsExchangeDefaultSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for RefsServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "gitfs.RefsService";
    impl<T> tonic::server::NamedService for RefsServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RepositoryInitRequest {
    /// should be uuid
    #[prost(string, tag = "3")]
    pub uid: ::prost::alloc::string::String,
    /// should be uuid
    #[prost(string, tag = "6")]
    pub owner: ::prost::alloc::string::String,
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub namespace: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub is_private: bool,
    #[prost(string, tag = "5")]
    pub default_branch: ::prost::alloc::string::String,
    #[prost(enumeration = "HashVersion", tag = "7")]
    pub hash_version: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RepositoryInitResponse {
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// should be uuid
    #[prost(string, tag = "2")]
    pub uid: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub namespace: ::prost::alloc::string::String,
    #[prost(bool, tag = "5")]
    pub is_private: bool,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RepositoryInfoRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub namespace: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum HashVersion {
    /// sha1
    HashV1 = 0,
    /// sha256
    HashV256 = 1,
}
impl HashVersion {
    /// Enum variant name as defined in the protobuf.
    ///
    /// Returns the original protobuf enum name as a `&'static str`, exactly matching the identifier in the .proto file.
    ///
    /// # Examples
    ///
    /// ```
    /// use crate::rpc::gitfs::HashVersion;
    /// assert_eq!(HashVersion::HashV1.as_str_name(), "HASH_V1");
    /// assert_eq!(HashVersion::HashV256.as_str_name(), "HASH_V256");
    /// ```
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::HashV1 => "HASH_V1",
            Self::HashV256 => "HASH_V256",
        }
    }
    /// Converts a Protobuf enum field name to the corresponding `HashVersion` variant.
    ///
    /// The input must match the Protobuf field name exactly (e.g., `"HASH_V1"`, `"HASH_V256"`).
    ///
    /// # Examples
    ///
    /// ```
    /// let v = HashVersion::from_str_name("HASH_V1");
    /// assert_eq!(v, Some(HashVersion::HashV1));
    /// ```
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "HASH_V1" => Some(Self::HashV1),
            "HASH_V256" => Some(Self::HashV256),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod repository_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct RepositoryServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl RepositoryServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> RepositoryServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> RepositoryServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            RepositoryServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn init(
            &mut self,
            request: impl tonic::IntoRequest<super::RepositoryInitRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RepositoryInitResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gitfs.RepositoryService/Init",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gitfs.RepositoryService", "Init"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn set_public(
            &mut self,
            request: impl tonic::IntoRequest<super::RpcRepository>,
        ) -> std::result::Result<tonic::Response<super::RpcRepository>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gitfs.RepositoryService/SetPublic",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gitfs.RepositoryService", "SetPublic"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn set_private(
            &mut self,
            request: impl tonic::IntoRequest<super::RpcRepository>,
        ) -> std::result::Result<tonic::Response<super::RpcRepository>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gitfs.RepositoryService/SetPrivate",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gitfs.RepositoryService", "SetPrivate"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete(
            &mut self,
            request: impl tonic::IntoRequest<super::RpcRepository>,
        ) -> std::result::Result<tonic::Response<super::RpcRepository>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gitfs.RepositoryService/Delete",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gitfs.RepositoryService", "Delete"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn info(
            &mut self,
            request: impl tonic::IntoRequest<super::RepositoryInfoRequest>,
        ) -> std::result::Result<tonic::Response<super::RpcRepository>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gitfs.RepositoryService/Info",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gitfs.RepositoryService", "Info"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod repository_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with RepositoryServiceServer.
    #[async_trait]
    pub trait RepositoryService: std::marker::Send + std::marker::Sync + 'static {
        async fn init(
            &self,
            request: tonic::Request<super::RepositoryInitRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RepositoryInitResponse>,
            tonic::Status,
        >;
        async fn set_public(
            &self,
            request: tonic::Request<super::RpcRepository>,
        ) -> std::result::Result<tonic::Response<super::RpcRepository>, tonic::Status>;
        async fn set_private(
            &self,
            request: tonic::Request<super::RpcRepository>,
        ) -> std::result::Result<tonic::Response<super::RpcRepository>, tonic::Status>;
        async fn delete(
            &self,
            request: tonic::Request<super::RpcRepository>,
        ) -> std::result::Result<tonic::Response<super::RpcRepository>, tonic::Status>;
        async fn info(
            &self,
            request: tonic::Request<super::RepositoryInfoRequest>,
        ) -> std::result::Result<tonic::Response<super::RpcRepository>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct RepositoryServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> RepositoryServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for RepositoryServiceServer<T>
    where
        T: RepositoryService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/gitfs.RepositoryService/Init" => {
                    #[allow(non_camel_case_types)]
                    struct InitSvc<T: RepositoryService>(pub Arc<T>);
                    impl<
                        T: RepositoryService,
                    > tonic::server::UnaryService<super::RepositoryInitRequest>
                    for InitSvc<T> {
                        type Response = super::RepositoryInitResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RepositoryInitRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RepositoryService>::init(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = InitSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gitfs.RepositoryService/SetPublic" => {
                    #[allow(non_camel_case_types)]
                    struct SetPublicSvc<T: RepositoryService>(pub Arc<T>);
                    impl<
                        T: RepositoryService,
                    > tonic::server::UnaryService<super::RpcRepository>
                    for SetPublicSvc<T> {
                        type Response = super::RpcRepository;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RpcRepository>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RepositoryService>::set_public(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SetPublicSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gitfs.RepositoryService/SetPrivate" => {
                    #[allow(non_camel_case_types)]
                    struct SetPrivateSvc<T: RepositoryService>(pub Arc<T>);
                    impl<
                        T: RepositoryService,
                    > tonic::server::UnaryService<super::RpcRepository>
                    for SetPrivateSvc<T> {
                        type Response = super::RpcRepository;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RpcRepository>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RepositoryService>::set_private(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SetPrivateSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gitfs.RepositoryService/Delete" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteSvc<T: RepositoryService>(pub Arc<T>);
                    impl<
                        T: RepositoryService,
                    > tonic::server::UnaryService<super::RpcRepository>
                    for DeleteSvc<T> {
                        type Response = super::RpcRepository;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RpcRepository>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RepositoryService>::delete(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gitfs.RepositoryService/Info" => {
                    #[allow(non_camel_case_types)]
                    struct InfoSvc<T: RepositoryService>(pub Arc<T>);
                    impl<
                        T: RepositoryService,
                    > tonic::server::UnaryService<super::RepositoryInfoRequest>
                    for InfoSvc<T> {
                        type Response = super::RpcRepository;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RepositoryInfoRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RepositoryService>::info(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = InfoSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for RepositoryServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "gitfs.RepositoryService";
    impl<T> tonic::server::NamedService for RepositoryServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PublicKey {
    /// should is uuid
    #[prost(string, tag = "1")]
    pub owner: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub public_key: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub fingerprint: ::prost::alloc::string::String,
    #[prost(uint64, tag = "4")]
    pub created_at: u64,
    #[prost(uint64, tag = "6")]
    pub last_used_at: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicKeys {
    #[prost(message, repeated, tag = "1")]
    pub keys: ::prost::alloc::vec::Vec<PublicKey>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PublicKeyRequest {
    #[prost(string, tag = "1")]
    pub owner: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PublicKeyInsertRequest {
    #[prost(message, optional, tag = "1")]
    pub key: ::core::option::Option<PublicKey>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PublicKeyDeleteRequest {
    #[prost(string, tag = "1")]
    pub owner: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub fingerprint: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod ssh_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct SshServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl SshServiceClient<tonic::transport::Channel> {
        /// Creates a new client by connecting to the specified gRPC endpoint.
        ///
        /// Attempts to convert `dst` into a `tonic::transport::Endpoint`, establishes a connection,
        /// and returns a client instance using that connection.
        ///
        /// # Errors
        ///
        /// Returns a `tonic::transport::Error` if the endpoint cannot be created or the connection fails.
        ///
        /// # Examples
        ///
        /// ```no_run
        /// # async fn example() -> Result<(), Box<dyn std::error::Error>> {
        /// let client = YourClient::connect("http://[::1]:50051").await?;
        /// # Ok(()) }
        /// ```
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> SshServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        /// Creates a new client that uses the provided gRPC transport.
        ///
        /// # Parameters
        ///
        /// - `inner`: the underlying gRPC transport or service to use for requests (for example a `tonic::transport::Channel`).
        ///
        /// # Returns
        ///
        /// A client instance that uses the provided gRPC transport.
        ///
        /// # Examples
        ///
        /// ```
        /// // establish a channel first (example)
        /// let channel = tonic::transport::Channel::from_static("http://[::1]:50051")
        ///     .connect_lazy();
        /// let client = CommitServiceClient::new(channel);
        /// ```
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        /// Create a client instance that uses the provided inner service and request origin.
        ///
        /// The `origin` is used as the base URI for outgoing requests produced by the client.
        ///
        /// # Parameters
        ///
        /// - `origin`: Base `Uri` that will be used for all requests from the returned client.
        ///
        /// # Returns
        ///
        /// A client configured to use the given inner service and origin.
        ///
        /// # Examples
        ///
        /// ```no_run
        /// use tonic::transport::Uri;
        /// use tonic::transport::Channel;
        /// // Replace `CommitServiceClient` with the concrete generated client type as needed.
        /// let channel = Channel::from_static("http://127.0.0.1:50051");
        /// let origin = Uri::from_static("http://example.com");
        /// let client = CommitServiceClient::with_origin(channel, origin);
        /// ```
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        /// Wraps a gRPC transport with the given interceptor and returns an SshServiceClient that uses it.
        ///
        /// The returned client will apply `interceptor` to all outgoing gRPC requests.
        ///
        /// # Returns
        ///
        /// An `SshServiceClient` that sends requests through the provided transport and applies the interceptor.
        ///
        /// # Examples
        ///
        /// ```
        /// // `inner` must implement the required tonic client service traits (e.g., a `Channel`).
        /// // `interceptor` must implement `tonic::service::Interceptor`.
        /// let inner = /* transport implementing the required tonic client service traits */;
        /// let interceptor = /* an interceptor implementing `tonic::service::Interceptor` */;
        /// let client = SshServiceClient::with_interceptor(inner, interceptor);
        /// ```
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> SshServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            SshServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Configure the client to compress outgoing requests using the specified encoding.
        ///
        /// The server must support the chosen encoding; otherwise requests may fail.
        ///
        /// # Parameters
        ///
        /// * `encoding` - The compression algorithm to apply to outbound request bodies.
        ///
        /// # Returns
        ///
        /// A client configured to compress outgoing requests with the given encoding.
        ///
        /// # Examples
        ///
        /// ```no_run
        /// use gitfs::rpc::gitfs::CompressionEncoding;
        /// // `client` is any generated gRPC client supporting `send_compressed`.
        /// let client = client.send_compressed(CompressionEncoding::Gzip);
        /// ```
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses for the client using the given encoding.
        ///
        /// The specified `encoding` will be accepted for incoming responses, allowing the client
        /// to transparently decompress payloads encoded with that compression.
        ///
        /// # Examples
        ///
        /// ```no_run
        /// # use tonic::codec::CompressionEncoding;
        /// // `client` type varies; show typical chaining usage:
        /// let client = CommitServiceClient::connect("http://example.com").await.unwrap()
        ///     .accept_compressed(CompressionEncoding::Gzip);
        /// ```
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Set the maximum allowed size (in bytes) for decoded incoming messages.
        ///
        /// The default limit is 4 MB. Values larger than this allow decoding of bigger messages;
        /// smaller values restrict the maximum size accepted.
        ///
        /// # Examples
        ///
        /// ```no_run
        /// // Configure a builder or server to accept messages up to 8 MiB:
        /// let builder = ServiceBuilder::new().max_decoding_message_size(8 * 1024 * 1024);
        /// ```
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Sets the maximum allowed size for encoded outgoing messages.
        ///
        /// Default: `usize::MAX`.
        ///
        /// # Examples
        ///
        /// ```
        /// let client = crate::commit_service_client::CommitServiceClient::new().max_encoding_message_size(1024);
        /// ```
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Sends a request to list SSH public keys for a repository owner.
        ///
        /// The `request` specifies which owner's public keys to retrieve.
        ///
        /// # Examples
        ///
        /// ```no_run
        /// # async fn doc() -> Result<(), Box<dyn std::error::Error>> {
        /// use gitfs::rpc::gitfs::{SshServiceClient, PublicKeyRequest};
        /// let mut client = SshServiceClient::connect("http://[::1]:50051").await?;
        /// let req = PublicKeyRequest { owner: "alice".into() };
        /// let response = client.list_public_keys(req).await?;
        /// let keys = response.into_inner();
        /// println!("found {} keys", keys.keys.len());
        /// # Ok(()) }
        /// ```
        -
        /// @returns A `tonic::Response` wrapping `PublicKeys` containing the owner's public keys.
        pub async fn list_public_keys(
            &mut self,
            request: impl tonic::IntoRequest<super::PublicKeyRequest>,
        ) -> std::result::Result<tonic::Response<super::PublicKeys>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gitfs.SshService/ListPublicKeys",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gitfs.SshService", "ListPublicKeys"));
            self.inner.unary(req, path, codec).await
        }
        /// Inserts a public SSH key for a user.
        ///
        /// Sends a `PublicKeyInsertRequest` to the SshService and returns the created `PublicKey`.
        ///
        /// # Arguments
        ///
        /// * `request` - The request containing the public key to insert.
        ///
        /// # Returns
        ///
        /// The inserted `PublicKey` on success, or a `tonic::Status` error.
        ///
        /// # Examples
        ///
        /// ```no_run
        /// # async fn doc() -> Result<(), Box<dyn std::error::Error>> {
        /// use gitfs::ssh_service_client::SshServiceClient;
        /// use gitfs::{PublicKey, PublicKeyInsertRequest};
        ///
        /// let mut client = SshServiceClient::connect("http://[::1]:50051").await?;
        /// let req = PublicKeyInsertRequest {
        ///     key: Some(PublicKey {
        ///         owner: "alice".into(),
        ///         public_key: "ssh-rsa AAA...".into(),
        ///         fingerprint: "".into(),
        ///         created_at: 0,
        ///         last_used_at: 0,
        ///     }),
        /// };
        /// let response = client.insert_public_key(req).await?;
        /// let inserted: PublicKey = response.into_inner();
        /// # Ok(()) }
        /// ```
        pub async fn insert_public_key(
            &mut self,
            request: impl tonic::IntoRequest<super::PublicKeyInsertRequest>,
        ) -> std::result::Result<tonic::Response<super::PublicKey>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gitfs.SshService/InsertPublicKey",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gitfs.SshService", "InsertPublicKey"));
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a public SSH key and returns the deleted key.
        ///
        /// # Returns
        ///
        /// A `tonic::Response<super::PublicKey>` containing the deleted public key.
        ///
        /// # Examples
        ///
        /// ```no_run
        /// # use gitfs::ssh_service_client::SshServiceClient;
        /// # use gitfs::PublicKeyDeleteRequest;
        /// # async fn example(mut client: SshServiceClient<tonic::transport::Channel>) -> Result<(), Box<dyn std::error::Error>> {
        /// let req = PublicKeyDeleteRequest { owner: "alice".into(), fingerprint: "fp-123".into() };
        /// let response = client.delete_public_key(req).await?;
        /// let deleted = response.into_inner();
        /// # Ok(())
        /// # }
        /// ```
        pub async fn delete_public_key(
            &mut self,
            request: impl tonic::IntoRequest<super::PublicKeyDeleteRequest>,
        ) -> std::result::Result<tonic::Response<super::PublicKey>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gitfs.SshService/DeletePublicKey",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gitfs.SshService", "DeletePublicKey"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod ssh_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with SshServiceServer.
    #[async_trait]
    pub trait SshService: std::marker::Send + std::marker::Sync + 'static {
        async fn list_public_keys(
            &self,
            request: tonic::Request<super::PublicKeyRequest>,
        ) -> std::result::Result<tonic::Response<super::PublicKeys>, tonic::Status>;
        async fn insert_public_key(
            &self,
            request: tonic::Request<super::PublicKeyInsertRequest>,
        ) -> std::result::Result<tonic::Response<super::PublicKey>, tonic::Status>;
        async fn delete_public_key(
            &self,
            request: tonic::Request<super::PublicKeyDeleteRequest>,
        ) -> std::result::Result<tonic::Response<super::PublicKey>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct SshServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> SshServiceServer<T> {
        /// Creates a new server that wraps the provided service implementation.
        ///
        /// # Examples
        ///
        /// ```
        /// // `MyServiceImpl` should implement the service trait (e.g., `CommitService`).
        /// let svc = MyServiceImpl::default();
        /// let server = CommitServiceServer::new(svc);
        /// ```
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        /// Constructs a server that takes shared ownership of the provided service implementation.
        ///
        /// The created server uses the given `Arc<T>` as its inner service and initializes
        /// compression encodings and message size limits to their defaults (no limits).
        ///
        /// # Parameters
        ///
        /// - `inner`: Shared, reference-counted service implementation to be used by the server.
        ///
        /// # Returns
        ///
        /// `Self` configured to use the provided service implementation with default compression settings
        /// and no explicit message size limits.
        ///
        /// # Examples
        ///
        /// ```
        /// use std::sync::Arc;
        ///
        /// struct MyService;
        /// // Assume `MyServiceServer<T>` is the generated server type
        /// let svc = Arc::new(MyService);
        /// let server = MyServiceServer::from_arc(svc);
        /// ```
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        /// Wraps the service `inner` with an interceptor and returns an intercepted service.
        ///
        /// The returned `InterceptedService` will invoke `interceptor` for each request before
        /// forwarding the request to `inner`.
        ///
        /// # Examples
        ///
        /// ```
        /// use tonic::service::Interceptor;
        /// // Assume `MyService` implements the required service trait and `my_interceptor` implements `Interceptor`.
        /// let svc = MyService::new();
        /// let intercepted = MyServiceServer::with_interceptor(svc, my_interceptor);
        /// ```
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        ///
        /// Allows the server to accept incoming requests that are compressed with `encoding`.
        ///
        /// # Examples
        ///
        /// ```
        /// use gitfs::rpc::gitfs::CompressionEncoding;
        /// // `server` is the service builder returned by the server constructor.
        /// let server = server.accept_compressed(CompressionEncoding::Gzip);
        /// ```
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Enable sending responses compressed with the specified encoding when the client
        /// indicates support for it.
        ///
        /// # Returns
        ///
        /// `Self` with the specified encoding enabled.
        ///
        /// # Examples
        ///
        /// ```
        /// use gitfs::rpc::gitfs::CompressionEncoding;
        ///
        /// let svc = MyService::new()
        ///     .send_compressed(CompressionEncoding::Gzip);
        /// ```
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Set the maximum allowed size for decoded messages.
        ///
        /// The default limit is 4 MB. The `limit` is interpreted in bytes and replaces any previously set value.
        ///
        /// # Arguments
        ///
        /// * `limit` - Maximum decoded message size in bytes.
        ///
        /// # Examples
        ///
        /// ```
        /// let svc = ServiceBuilder::new().max_decoding_message_size(8 * 1024 * 1024);
        /// ```
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Sets the maximum allowed size (in bytes) for encoded outgoing messages.
        ///
        /// If a message exceeds this limit during encoding, it will be rejected by the client/server layer.
        /// Default: `usize::MAX`.
        ///
        /// # Examples
        ///
        /// ```
        /// let svc = CommitServiceServer::new(MySvc::default())
        ///     .max_encoding_message_size(1024 * 1024); // 1 MiB
        /// ```
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for SshServiceServer<T>
    where
        T: SshService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        /// Always reports the service as ready to accept a request.
        ///
        /// # Returns
        ///
        /// `Poll::Ready(Ok(()))` indicating the service is ready to accept a request.
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        /// Dispatches incoming HTTP requests to the appropriate SshService gRPC handlers.
        ///
        /// This method matches the request URI path and routes it to the corresponding unary
        /// RPC implementation (ListPublicKeys, InsertPublicKey, DeletePublicKey). For recognized
        /// paths it constructs the service wrapper, configures gRPC codec, compression and
        /// message size limits, and invokes the unary handler. For unknown paths it returns an
        /// HTTP response with gRPC Unimplemented status.
        ///
        /// # Examples
        ///
        /// ```no_run
        /// // Construct an HTTP request targeting the ListPublicKeys RPC and pass it to the
        /// // generated service's `call` method. The service will route the request to the
        /// // SshService::list_public_keys handler.
        /// let req = http::Request::builder()
        ///     .uri("/gitfs.SshService/ListPublicKeys")
        ///     .body(tonic::body::Body::empty())
        ///     .unwrap();
        /// // `service` is the generated server type implementing Tower's Service trait.
        /// // let fut = service.call(req);
        /// ```
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/gitfs.SshService/ListPublicKeys" => {
                    #[allow(non_camel_case_types)]
                    struct ListPublicKeysSvc<T: SshService>(pub Arc<T>);
                    impl<
                        T: SshService,
                    > tonic::server::UnaryService<super::PublicKeyRequest>
                    for ListPublicKeysSvc<T> {
                        type Response = super::PublicKeys;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PublicKeyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SshService>::list_public_keys(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListPublicKeysSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gitfs.SshService/InsertPublicKey" => {
                    #[allow(non_camel_case_types)]
                    struct InsertPublicKeySvc<T: SshService>(pub Arc<T>);
                    impl<
                        T: SshService,
                    > tonic::server::UnaryService<super::PublicKeyInsertRequest>
                    for InsertPublicKeySvc<T> {
                        type Response = super::PublicKey;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PublicKeyInsertRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SshService>::insert_public_key(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = InsertPublicKeySvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gitfs.SshService/DeletePublicKey" => {
                    #[allow(non_camel_case_types)]
                    struct DeletePublicKeySvc<T: SshService>(pub Arc<T>);
                    impl<
                        T: SshService,
                    > tonic::server::UnaryService<super::PublicKeyDeleteRequest>
                    for DeletePublicKeySvc<T> {
                        type Response = super::PublicKey;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PublicKeyDeleteRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SshService>::delete_public_key(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeletePublicKeySvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for SshServiceServer<T> {
        /// Create a clone of the server preserving its inner service and configuration.
        ///
        /// The cloned value shares the same `inner` reference and copies compression and
        /// message-size settings.
        ///
        /// # Examples
        ///
        /// ```
        /// let server2 = server1.clone();
        /// ```
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "gitfs.SshService";
    impl<T> tonic::server::NamedService for SshServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TreeCurrentRequest {
    #[prost(message, optional, tag = "1")]
    pub repository: ::core::option::Option<RpcRepository>,
    /// 新增：查询指定目录（以仓库根为基准），空或 "/" 表示根目录
    #[prost(string, tag = "2")]
    pub path: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "3")]
    pub revision: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "4")]
    pub refs: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TreeCurrentResponse {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<TreeMessage>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TreeMessage {
    #[prost(message, optional, tag = "1")]
    pub item: ::core::option::Option<RpcTreeItem>,
    #[prost(message, optional, tag = "2")]
    pub commit: ::core::option::Option<RpcCommit>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CommitTreeRequest {
    #[prost(message, optional, tag = "1")]
    pub repository: ::core::option::Option<RpcRepository>,
    #[prost(string, tag = "2")]
    pub commit_hash: ::prost::alloc::string::String,
    /// 新增：查询指定目录（以仓库根为基准），空或 "/" 表示根目录
    #[prost(string, tag = "3")]
    pub path: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommitTreeResponse {
    #[prost(message, optional, tag = "1")]
    pub tree: ::core::option::Option<RpcTree>,
}
/// Generated client implementations.
pub mod tree_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct TreeServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl TreeServiceClient<tonic::transport::Channel> {
        /// Creates a new client by connecting to the specified gRPC endpoint.
        ///
        /// Attempts to convert `dst` into a `tonic::transport::Endpoint`, establishes a connection,
        /// and returns a client instance using that connection.
        ///
        /// # Errors
        ///
        /// Returns a `tonic::transport::Error` if the endpoint cannot be created or the connection fails.
        ///
        /// # Examples
        ///
        /// ```no_run
        /// # async fn example() -> Result<(), Box<dyn std::error::Error>> {
        /// let client = YourClient::connect("http://[::1]:50051").await?;
        /// # Ok(()) }
        /// ```
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> TreeServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        /// Creates a new client that uses the provided gRPC transport.
        ///
        /// # Parameters
        ///
        /// - `inner`: the underlying gRPC transport or service to use for requests (for example a `tonic::transport::Channel`).
        ///
        /// # Returns
        ///
        /// A client instance that uses the provided gRPC transport.
        ///
        /// # Examples
        ///
        /// ```
        /// // establish a channel first (example)
        /// let channel = tonic::transport::Channel::from_static("http://[::1]:50051")
        ///     .connect_lazy();
        /// let client = CommitServiceClient::new(channel);
        /// ```
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        /// Create a client instance that uses the provided inner service and request origin.
        ///
        /// The `origin` is used as the base URI for outgoing requests produced by the client.
        ///
        /// # Parameters
        ///
        /// - `origin`: Base `Uri` that will be used for all requests from the returned client.
        ///
        /// # Returns
        ///
        /// A client configured to use the given inner service and origin.
        ///
        /// # Examples
        ///
        /// ```no_run
        /// use tonic::transport::Uri;
        /// use tonic::transport::Channel;
        /// // Replace `CommitServiceClient` with the concrete generated client type as needed.
        /// let channel = Channel::from_static("http://127.0.0.1:50051");
        /// let origin = Uri::from_static("http://example.com");
        /// let client = CommitServiceClient::with_origin(channel, origin);
        /// ```
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        /// Wraps an existing gRPC client with an interceptor and returns a TreeServiceClient using that intercepted service.
        ///
        /// # Examples
        ///
        /// ```
        /// use gitfs::tree_service_client::TreeServiceClient;
        /// use tonic::service::Interceptor;
        ///
        /// // `inner` is an existing gRPC client that implements the required traits.
        /// let inner = /* existing client */;
        ///
        /// // Create a simple interceptor that forwards requests unchanged.
        /// let interceptor = Interceptor::new(|req| Ok(req));
        ///
        /// let client = TreeServiceClient::with_interceptor(inner, interceptor);
        /// ```
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> TreeServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            TreeServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Configure the client to compress outgoing requests using the specified encoding.
        ///
        /// The server must support the chosen encoding; otherwise requests may fail.
        ///
        /// # Parameters
        ///
        /// * `encoding` - The compression algorithm to apply to outbound request bodies.
        ///
        /// # Returns
        ///
        /// A client configured to compress outgoing requests with the given encoding.
        ///
        /// # Examples
        ///
        /// ```no_run
        /// use gitfs::rpc::gitfs::CompressionEncoding;
        /// // `client` is any generated gRPC client supporting `send_compressed`.
        /// let client = client.send_compressed(CompressionEncoding::Gzip);
        /// ```
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses for the client using the given encoding.
        ///
        /// The specified `encoding` will be accepted for incoming responses, allowing the client
        /// to transparently decompress payloads encoded with that compression.
        ///
        /// # Examples
        ///
        /// ```no_run
        /// # use tonic::codec::CompressionEncoding;
        /// // `client` type varies; show typical chaining usage:
        /// let client = CommitServiceClient::connect("http://example.com").await.unwrap()
        ///     .accept_compressed(CompressionEncoding::Gzip);
        /// ```
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Set the maximum allowed size (in bytes) for decoded incoming messages.
        ///
        /// The default limit is 4 MB. Values larger than this allow decoding of bigger messages;
        /// smaller values restrict the maximum size accepted.
        ///
        /// # Examples
        ///
        /// ```no_run
        /// // Configure a builder or server to accept messages up to 8 MiB:
        /// let builder = ServiceBuilder::new().max_decoding_message_size(8 * 1024 * 1024);
        /// ```
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Sets the maximum allowed size for encoded outgoing messages.
        ///
        /// Default: `usize::MAX`.
        ///
        /// # Examples
        ///
        /// ```
        /// let client = crate::commit_service_client::CommitServiceClient::new().max_encoding_message_size(1024);
        /// ```
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Invokes the TreeService `GetCurrentTree` RPC to retrieve the current tree for a repository path.
        
        ///
        
        /// The `request` must contain repository information and path/revision parameters used to select the tree.
        
        ///
        
        /// # Examples
        
        ///
        
        /// ```no_run
        
        /// # async fn doc_example(mut client: crate::rpc::tree_service_client::TreeServiceClient<tonic::transport::Channel>) -> Result<(), tonic::Status> {
        
        /// use crate::rpc::gitfs::TreeCurrentRequest;
        
        /// let req = TreeCurrentRequest {
        
        ///     repository: None,
        
        ///     path: "/".to_string(),
        
        ///     revision: None,
        
        ///     refs: "".to_string(),
        
        /// };
        
        /// let resp = client.get_current_tree(req).await?;
        
        /// let tree = resp.into_inner();
        
        /// # Ok(())
        
        /// # }
        
        /// ```
        pub async fn get_current_tree(
            &mut self,
            request: impl tonic::IntoRequest<super::TreeCurrentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TreeCurrentResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gitfs.TreeService/GetCurrentTree",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gitfs.TreeService", "GetCurrentTree"));
            self.inner.unary(req, path, codec).await
        }
        /// Request the tree for a specific commit in a repository.
        ///
        /// # Examples
        ///
        /// ```no_run
        /// # async fn doc_example() -> Result<(), Box<dyn std::error::Error>> {
        /// let mut client = gitfs::tree_service_client::TreeServiceClient::connect("http://[::1]:50051").await?;
        /// let request = gitfs::CommitTreeRequest {
        ///     repository: None,
        ///     commit_hash: "deadbeef".to_string(),
        ///     path: "".to_string(),
        /// };
        /// let response = client.get_commit_tree(request).await?;
        /// println!("{:#?}", response.into_inner());
        /// # Ok(())
        /// # }
        /// ```
        ///
        /// @returns `tonic::Response<super::CommitTreeResponse>` containing the commit tree on success.
        pub async fn get_commit_tree(
            &mut self,
            request: impl tonic::IntoRequest<super::CommitTreeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CommitTreeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gitfs.TreeService/GetCommitTree",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("gitfs.TreeService", "GetCommitTree"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod tree_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with TreeServiceServer.
    #[async_trait]
    pub trait TreeService: std::marker::Send + std::marker::Sync + 'static {
        async fn get_current_tree(
            &self,
            request: tonic::Request<super::TreeCurrentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TreeCurrentResponse>,
            tonic::Status,
        >;
        async fn get_commit_tree(
            &self,
            request: tonic::Request<super::CommitTreeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CommitTreeResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct TreeServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> TreeServiceServer<T> {
        /// Creates a new server that wraps the provided service implementation.
        ///
        /// # Examples
        ///
        /// ```
        /// // `MyServiceImpl` should implement the service trait (e.g., `CommitService`).
        /// let svc = MyServiceImpl::default();
        /// let server = CommitServiceServer::new(svc);
        /// ```
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        /// Constructs a server that takes shared ownership of the provided service implementation.
        ///
        /// The created server uses the given `Arc<T>` as its inner service and initializes
        /// compression encodings and message size limits to their defaults (no limits).
        ///
        /// # Parameters
        ///
        /// - `inner`: Shared, reference-counted service implementation to be used by the server.
        ///
        /// # Returns
        ///
        /// `Self` configured to use the provided service implementation with default compression settings
        /// and no explicit message size limits.
        ///
        /// # Examples
        ///
        /// ```
        /// use std::sync::Arc;
        ///
        /// struct MyService;
        /// // Assume `MyServiceServer<T>` is the generated server type
        /// let svc = Arc::new(MyService);
        /// let server = MyServiceServer::from_arc(svc);
        /// ```
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        /// Wraps the service `inner` with an interceptor and returns an intercepted service.
        ///
        /// The returned `InterceptedService` will invoke `interceptor` for each request before
        /// forwarding the request to `inner`.
        ///
        /// # Examples
        ///
        /// ```
        /// use tonic::service::Interceptor;
        /// // Assume `MyService` implements the required service trait and `my_interceptor` implements `Interceptor`.
        /// let svc = MyService::new();
        /// let intercepted = MyServiceServer::with_interceptor(svc, my_interceptor);
        /// ```
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        ///
        /// Allows the server to accept incoming requests that are compressed with `encoding`.
        ///
        /// # Examples
        ///
        /// ```
        /// use gitfs::rpc::gitfs::CompressionEncoding;
        /// // `server` is the service builder returned by the server constructor.
        /// let server = server.accept_compressed(CompressionEncoding::Gzip);
        /// ```
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Enable sending responses compressed with the specified encoding when the client
        /// indicates support for it.
        ///
        /// # Returns
        ///
        /// `Self` with the specified encoding enabled.
        ///
        /// # Examples
        ///
        /// ```
        /// use gitfs::rpc::gitfs::CompressionEncoding;
        ///
        /// let svc = MyService::new()
        ///     .send_compressed(CompressionEncoding::Gzip);
        /// ```
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Set the maximum allowed size for decoded messages.
        ///
        /// The default limit is 4 MB. The `limit` is interpreted in bytes and replaces any previously set value.
        ///
        /// # Arguments
        ///
        /// * `limit` - Maximum decoded message size in bytes.
        ///
        /// # Examples
        ///
        /// ```
        /// let svc = ServiceBuilder::new().max_decoding_message_size(8 * 1024 * 1024);
        /// ```
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Sets the maximum allowed size (in bytes) for encoded outgoing messages.
        ///
        /// If a message exceeds this limit during encoding, it will be rejected by the client/server layer.
        /// Default: `usize::MAX`.
        ///
        /// # Examples
        ///
        /// ```
        /// let svc = CommitServiceServer::new(MySvc::default())
        ///     .max_encoding_message_size(1024 * 1024); // 1 MiB
        /// ```
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for TreeServiceServer<T>
    where
        T: TreeService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        /// Always reports the service as ready to accept a request.
        ///
        /// # Returns
        ///
        /// `Poll::Ready(Ok(()))` indicating the service is ready to accept a request.
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        /// Dispatches an incoming HTTP request to the appropriate TreeService RPC handler based on the request URI.
        ///
        /// This method matches the request URI and routes to either the `GetCurrentTree` or `GetCommitTree` unary
        /// RPC implementation; any other path receives an gRPC `Unimplemented` HTTP response.
        ///
        /// # Examples
        ///
        /// ```no_run
        /// // Construct an HTTP request targeting the GetCurrentTree RPC and dispatch it to the service.
        /// let req = http::Request::builder()
        ///     .uri("/gitfs.TreeService/GetCurrentTree")
        ///     .body(tonic::body::BoxBody::empty())
        ///     .unwrap();
        /// // `service` is the generated TreeServiceServer instance; calling `service.call(req)` returns the future
        /// // that resolves to the gRPC response for that RPC.
        /// // let fut = service.call(req);
        /// ```
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/gitfs.TreeService/GetCurrentTree" => {
                    #[allow(non_camel_case_types)]
                    struct GetCurrentTreeSvc<T: TreeService>(pub Arc<T>);
                    impl<
                        T: TreeService,
                    > tonic::server::UnaryService<super::TreeCurrentRequest>
                    for GetCurrentTreeSvc<T> {
                        type Response = super::TreeCurrentResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TreeCurrentRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TreeService>::get_current_tree(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetCurrentTreeSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gitfs.TreeService/GetCommitTree" => {
                    #[allow(non_camel_case_types)]
                    struct GetCommitTreeSvc<T: TreeService>(pub Arc<T>);
                    impl<
                        T: TreeService,
                    > tonic::server::UnaryService<super::CommitTreeRequest>
                    for GetCommitTreeSvc<T> {
                        type Response = super::CommitTreeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CommitTreeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TreeService>::get_commit_tree(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetCommitTreeSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for TreeServiceServer<T> {
        /// Create a clone of the server preserving its inner service and configuration.
        ///
        /// The cloned value shares the same `inner` reference and copies compression and
        /// message-size settings.
        ///
        /// # Examples
        ///
        /// ```
        /// let server2 = server1.clone();
        /// ```
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "gitfs.TreeService";
    impl<T> tonic::server::NamedService for TreeServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}